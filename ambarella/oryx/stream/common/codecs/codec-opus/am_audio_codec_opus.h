/*******************************************************************************
 * am_audio_codec_opus.h
 *
 * History:
 *   2014-11-10 - [ccjing] created file
 *
 * Copyright (C) 2008-2014, Ambarella Co, Ltd.
 *
 * All rights reserved. No Part of this file may be reproduced, stored
 * in a retrieval system, or transmitted, in any form, or by any means,
 * electronic, mechanical, photocopying, recording, or otherwise,
 * without the prior consent of Ambarella.
 *
 ******************************************************************************/
#ifndef AM_AUDIO_CODEC_OPUS_H_
#define AM_AUDIO_CODEC_OPUS_H_

#include <opus/opus.h>

class AMAudioCodecOpusConfig;
struct AudioCodecOpusConfig;

class AMAudioCodecOpus: public AMAudioCodec
{
    typedef AMAudioCodec inherited;

  public:
    static AMIAudioCodec* create(const char* config);

  public:
    virtual void destroy();
    virtual bool initialize(AM_AUDIO_INFO *srcAudioInfo,
                            AM_AUDIO_CODEC_MODE mode);
    virtual bool finalize();
    virtual AM_AUDIO_INFO* get_codec_audio_info();
    virtual uint32_t get_codec_output_size();
    virtual bool get_encode_required_src_parameter(AM_AUDIO_INFO &info);
    /* encode: return generated bytes,
     * generated data size is also stored in out_data_size
     */
    virtual uint32_t encode(uint8_t *input,
                            uint32_t in_data_size,
                            uint8_t *output,
                            uint32_t *out_data_size);
    /* decode: return consumed bytes,
     * generated data size is stored in out_data_size.
     */
    virtual uint32_t decode(uint8_t *input,
                            uint32_t in_data_size,
                            uint8_t *output,
                            uint32_t *out_data_size);

  protected:
    AMAudioCodecOpus();
    virtual ~AMAudioCodecOpus();
    bool init(const char* config);

  private:
    AudioCodecOpusConfig   *m_opus_config;/* no need to delete here */
    AMAudioCodecOpusConfig *m_config;
    OpusEncoder            *m_encoder;
    OpusDecoder            *m_decoder;
    OpusRepacketizer       *m_repacketizer;
    uint8_t                *m_enc_output_buf;
    int32_t                 m_encode_frame_size;
    uint32_t                m_encode_frame_bytes;
};

#endif /* AM_AUDIO_CODEC_OPUS_H_ */
