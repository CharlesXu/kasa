/*******************************************************************************
 * am_audio_codec_if.h
 *
 * History:
 *   2014-9-24 - [ypchang] created file
 *
 * Copyright (C) 2008-2014, Ambarella Co, Ltd.
 *
 * All rights reserved. No Part of this file may be reproduced, stored
 * in a retrieval system, or transmitted, in any form, or by any means,
 * electronic, mechanical, photocopying, recording, or otherwise,
 * without the prior consent of Ambarella.
 *
 ******************************************************************************/
#ifndef AM_AUDIO_CODEC_IF_H_
#define AM_AUDIO_CODEC_IF_H_

#include "am_audio_type.h"

enum AM_AUDIO_CODEC_MODE
{
  AM_AUDIO_CODEC_MODE_NONE,
  AM_AUDIO_CODEC_MODE_ENCODE,
  AM_AUDIO_CODEC_MODE_DECODE,
};

struct AM_AUDIO_INFO;
class AMIAudioCodec
{
  public:
    virtual void destroy()                               = 0;
    virtual const std::string& get_codec_name()          = 0;
    virtual AM_AUDIO_CODEC_TYPE get_codec_type()         = 0;
    virtual bool is_initialized()                        = 0;
    virtual bool initialize(AM_AUDIO_INFO *srcAudioInfo,
                            AM_AUDIO_CODEC_MODE mode)    = 0;
    virtual bool finalize()                              = 0;
    /*
     * Encoded/Decoded audio information
     */
    virtual AM_AUDIO_INFO* get_codec_audio_info()        = 0;
    virtual uint32_t get_codec_output_size()             = 0;
    /*
     * Encode required audio source parameter, is the audio codec required
     * audio parameter for encoding, this is used for setting audio
     * capture's audio parameters;
     * This API must be called before initializing audio codec to encode mode
     */
    virtual bool get_encode_required_src_parameter(AM_AUDIO_INFO &info) = 0;
    /* encode: return generated bytes,
     * generated data size is also stored in out_data_size
     */
    virtual uint32_t encode(uint8_t *input,  uint32_t in_data_size,
                            uint8_t *output, uint32_t *out_data_size)   = 0;
    /* decode: return consumed bytes,
     * generated data size is stored in out_data_size
     */
    virtual uint32_t decode(uint8_t *input,  uint32_t in_data_size,
                            uint8_t *output, uint32_t *out_data_size)   = 0;
    virtual ~AMIAudioCodec(){}
};

#ifdef __cplusplus
extern "C" {
#endif
AMIAudioCodec* get_audio_codec(const char *config);
#ifdef __cplusplus
}
#endif

typedef AMIAudioCodec* (*AudioCodecNew)(const char *config);

#define AUDIO_CODEC_NEW ((const char*)"get_audio_codec")

#endif /* AM_AUDIO_CODEC_IF_H_ */
